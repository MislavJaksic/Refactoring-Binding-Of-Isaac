### First things first... play the game!

Before reading the code I wanted to get a feeling for the project scope: how many systems does it have, how
complex do they seem to be, how do they interact with the player and each other. As I couldn't find any project
documentation I decided to play the game and take notes on what I think is going on behind the scenes.
The notes I took are as follows:

Inputs: shoot and move; arrow keys and wasd.

The character can move in eight directions.
The character can shoot in four directions.
The character movement is blocked by walls.
The character moves randomly between rooms.
The character has health.
The character can pick up hearts and increase their health.
The character can take health damage.

A room has walls.
A room has doors.
A room can have enemies moving or shooting at the character.
A room can have moving obstacles.
A room's doors open when there are no enemies.

Enemies can move in all directions, even though walls.
Enemies can shoot in four directions.
Enemies have health, but the player cannot see it.
Enemies that touch the character deal health damage.
Enemies struck by the character's bullets take health damage.

After a few minutes, I've concluded that the Game is made out of Levels; Levels have Walls, Doors, Enemies and a Character;
the Enemies are quite diverse; the Character has a limited amount of health.

### Changing the morphology

After collapsing all the functions and deleting a few superfluous blank lines I've immediately noticed that the
JavaScript code is embedded in a HTML document. I'll remedy this by creating a "scripts" folder where I'll store all
the JavaScript code.

Now that the HTML and JavaScript files are in their separate folders, I'm going to place all the JavaScript variables
(and constants disguised as variables) at the top of the script, so I can get a better overview of what is going on.

Clean Code stresses the importance of carefully choosing variable names. Descriptive variable names can make
the code read as if it was written in a controlled language (see "Simple English") while poorly chosen names can
transform the program into an unsolvable puzzle. The first thing I'm going to do is change a few variable names:
abbreviations such as "ctx" will be renamed to "context"; short, names such as "x" will be replaced by a longer,
more descriptive name.

In addition, I'm going establish the following naming and style conventions:
* Local and global variables are made of lowercase words separated by underscores ("_").
* All other names are written in CamelCase: functions, methods, JavaScript "classes" and others.

* Indents are two whitespaces wide.
* Every statement ends with a ;.

For now, those conventions will be sufficient.

After replacing the names, I glanced at the event handlers. Each time the user presses or releases a key, the game
registers an event and performs the appropriate action. A total of eight key are tracked and are divided into two
groups of four keys: arrow keys for shooting and wasd for moving. This is how you control the game.

Now that variables and functions have been renamed, a few conventions have been established and I've identified
which functions deal with the input and which are responsible for drawing shapes, I'm ready analyse how the game is
implemented.

### Implementation analysis

The first function which the code invokes is Draw(). Looking at it, I can see that it does a lot; and at different
levels of abstraction (function, long, nested conditions and implementation statements, all weaved together).
Separating the implementation code and highly abstract functions is going to be my next order of business. After a
careful analysis, I have concluded that every time the <Canvas> element is redrawn the following happens in order:
<Canvas> is reset; something is done depending on the door_number; doors are drawn; the game check the victory and
defeat conditions; if bullets were fired, they should be drawn; walls, levels, the character, hearts and the score
is also drawn; a special bullet condition is checked; requestAnimationFrame() function is invoked; if any of the
shoot buttons are pressed, a bullet object is appended to the bullet array.

Now I'll take a look at the <Canvas> API and how the game is implemented at the lowest level of abstraction.

### Drawing API

 Canvas coordinate system:                      x
  ---------------------------------------------->
 | x=0, y=0
 |
 |
 |
 |
yV                x=canvas.width, y=canvas.height

[Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial):
* document.getElementById("myCanvas"); //-> grabs the <Canvas> from the HTML document
* canvas.getContext("2d"); //-> extracts the 2d context from the <Canvas>; drawing API is invoked thought it

[2D Canvas Context](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D):
* context.clearRect(x, y, width, height); //-> draw transparent black between the coordinates
* context.beginPath(); //-> begin a new path and clear all the older subpaths
* context.closePath(); //-> move the "pen" to the starting subpath coordinate and draw a line between the end and start points; either fill() or stroke()
* context.rect(x, y, width, height); //-> create a rectangle path for either stroke() or fill()
* context.arc(x, y, radius, startAngle, endAngle [, anticlockwise]); //-> start drawing from the x axis and continue clockwise; angles are expressed in radians, 90 degrees -> PI/2
* context.fill([fillRule]); //-> colour in everything "inside" the path (depending on the fill rule)
* context.stroke(); //-> draw the path

Now that I know what the game has to offer, how it is implemented and which technology it uses I can start
refactoring some of the functions.

### Refactoring; first attempt

I'll start with the Draw() function. First, I consider what is being draw on the canvas. Its Shapes of different sizes and colours. These Shapes are mostly Rectangles, but there are also pie Slices and Circles.
I'll keep this in mind as I construct the JavaScript "classes" (called prototypes).

First, I'm going to wrap the 2DContext API with my own functions, because if I ever change my mind about the
implementation technology, I'll be able to change it quite easily by editing just a few lines of code in a single
function, whereas if these API calls were made all over the program, it would take hundreds of changes in multiple
blocks of code. When the API calls were safely tucked into my functions, I created a few abstract and concrete
classes: Point, Arc, Shape, Rectangle, Circle and Slice. Point couples x and y values, Arc simplifies drawing pie
Slices and Shape is an abstract class from which all other shapes, such as Rectangle and Circle, are going to inherit
the low level implementation methods.

To test this class architecture, I chose a rather small function, DrawWalls(), to see if I can effectively refactor
its code. If I could not, it would indicate that I need to rethink the class inheritance ("is a") and
composition ("has a"), but I had no problems refactoring the code. By analysing DrawWalls() I've noticed it draws
eight walls, two in each corner of the canvas. Instead of doing the same, I decided to create four walls and then
drill a door in each wall, so that I could more easily refactor collision detection. I then created two more classes,
Wall and Door, where a Door is a Wall, but you can go through it. Finally, I renamed Draw() to RedrawCanvas(),
before saving the script.

You can view the progress so far by read the rework_0.1.js script.

### Refactoring continues

Next, I'm going to take a look at the DrawCharacter() function. The character is drawn as a circle and its position
is tracked using two variables, x and y. x and y will be renamed to x_character and y_character for they are too
important to have a single letter name. Then, I move onto the next function.

Character health is represented by hearts, more specifically, each health point is drawn as half a heart and
DrawHearts() draws them on the canvas. The Health bar origin is positioned in the top left corner of the canvas and
the hearts in it are drawn at a regular interval. A Heart is a shape made up of a pie Slice and a Triangle.
Refactoring the function would be a breeze were the player not able to increase and decrease their health. However,
because they can and the logic that controls those changes cannot be found in DrawHearts(), I have to look around
the whole program for where it is implemented. After searching for quite a while, I've concluded that the code in
question is always just below the character_health variable, which I promptly refactor and eliminate code duplication.

Next, I create the HealthBar, FullHeart, HalfHeart and Triangle classes and analyse their contents. The HealthBar is
either made up of FullHearts, if the number of health points is even, or consists of a few (or no) FullHearts and a
single left HalfHeart if the number of health points is odd. A FullHeart has a left and a right HalfHeart. A HalfHeart
has a Triangle and a pie Slice.
The reason why I have modularized and abstracted the code so much is because I find it much easier to handle just a
few abstract classes, such as a HealthBar, then to juggle a whole array of implementation level, concrete classes.
This also allows me to decouple the HealthBar class from its visual implementation, so that if I suddenly change my
mind and want to represent health as orbs, I'll be able to change only a few function which deal with drawing, as
oppose to every single class that deals with health.

You can see the changes I've made to the code in the rework_0.2.js script.

### Drilling deeper into the code

Shooting! An integral part of the game I decided to tackle next. I extracted the code that seems to be responsible
for shooting into its own function and indented it according to the style convention. The array "bullets" is closely
related to two other functions called DrawShot() and RemoveShot(). I'll take a look at the DrawShot() function first.

What DrawShot() seems to do is check all enemies positions in all levels and then compare it with the position of
the bullet. If the bullet is near the enemy, it gets damaged. In order to better understand how enemies are named
and created, I'll take a look at the levels array, which you might have noticed, is 3000 lines long.

I'll treat levels as an onion. I'll "peel it" layer by layer. After indenting the code, I've started to divine what
is going on: the levels array is made up of 5 objects where each object can have a level function, an enemies object
and flags. The level function moves the character, spawns enemies and draws the inner walls. The enemies object is
made up of functions and data that define the enemies. The status flag seems to be either 1 when the level should be
drawn or 0 otherwise.

The function DrawLevels() is responsible for drawing a level and it knows which level to draw based on the value of
the status flag in the levels array.

I've extracted the function which changes the status flags into its own function, ChooseLevelToDrawn(). After
indenting, I can see that the function controls game level transitions. It checks if the character has entered a
"door". The door is just a coloured area on the canvas, completely separate from the function which check if the
character "touched" the door. That should be remedied by extending the Door class.

However, first, I'm going to analyse the code after the condition. randomly_generated_level is either 1, 2, 3 or
some other number which is just treated as "other" and randomly_generated_door is either 1, 2 or , again, some
"other" number. I'll change the code so that "other" is a number. After extracting the IF condition into four
separate predicate functions, thereby eliminating code duplication, I went on to refactor the levels array in
parallel after noticing that the functions are closely related.

After looking at the levels array I decided to switch tactics from "meticulous analysis..." to "Shovel the code into
functions!". Hopefully, after all the code is refactored, I'll be able to discern what is going on in the array.

After refactoring the level one function in the levels array, the code looks like: rework_0.3.js.

### Analysing and sorting the functions

After looking at the levels array a bit more I've been able to conclude the following about the flags:
Status flag: 1 if the level if drawn
Active flag: 1 if the level enemies are defeated
Regen flag: 1 if the health increase has been picked up

Status flag: 1 if the level if drawn
Active flag: 1 if the level enemies are defeated
Regen flag: 1 if the health increase has been picked up

It is now clear that the levels array handles drawing walls, movement and collision, enemy spawning and dispensing
rewards to the player in the form of health increases. I think I'll be able to eliminate some of the code
duplication if I couple the collision detection system (a complex if statement) with the Wall class and make the
movement system independent from the game level context.

### Change of plan

After a lot more refactoring I've concluded that keeping the current game architecture while slowly replacing it
with the new one is far more tiresome then just constructing the game from scratch using the refactored, abstract,
building blocks I've created during this whole refactoring endeavour. The reason for this is that the time has come
to deal with the global variables and how events are handled; they should be tucked into classes and events should
be handled directly instead of through global variables.

The old architecture game can be seen in rework_0.4.js script.

After removing the remnants of the old architecture, I've tested the game to see if I can make the character move
smoothly and if I could easily draw the health bar. I've also refined some of the classes and added a few helper
classes such as ExtremeCoordinates to reduce the number of parameters passed to functions.

The end result can be seen in rework_1.0.js script.

### Restoring the starting room

From here on out, I think I'll be making progress at a much faster pace. After constructing the outer walls of the starting level, solving collision detection and movement, the script looks like this: rework_1.1.js script.

To make sure I have a comprehensive naming scheme and to reduce the amount of time I need to conjure up a 
descriptive name, I've settled on the following prefix convention:
Initialize_*: return a complex global object
Draw_*: returns nothing; makes the object appear on canvas
Get_*: returns a single value; all the required data is in the object
Calculate_*: returns multiple values; some data has to be coded in or given as input
Is_*: returns true or false; a predicate function

Some of the Is_* prefixed function are going to sound silly when read aloud, but I think that is well worth it if 
I'll be able to tell functions apart with a single glance. Until now, I have constructed Walls, a Health Bar and a
Collision Detector. There are three more thing that will turn this from a walking gallery to a real game: Enemies,
Shooting and Level Transition though Doors. Because the Door class already exists, lets tackle Level Transition next.

### Level transition and generation

